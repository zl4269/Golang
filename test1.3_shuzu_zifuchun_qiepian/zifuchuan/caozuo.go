//字符串的运算符操作 ==  !=  >=  <= >和<
//原生支持多行字符串，通过反引号构造所见即所得的多行字符串
//字符串结构=======》相当于描述符，只是用来描述字符串，但是真正的字符串是底层存储的[]byte数组，字符串在当做参数的时候，传入的就是该描述符
/*
type stringStruct struct{
	str unsafe.Pointer     //指向字符串起始元素的指针
	len int    //字符串长度
}
*/

package main

import "fmt"

func main() {
	//== 长度和指针都是指向同一个存储区域认定两个字符串是等价的
	s1 := "世界和平"
	s2 := "世界" + "和平"
	fmt.Println(s1 == s2) //true

	//!=
	a1 := "Go"
	a2 := "C"
	fmt.Println(a1 != a2) //true

	// < 和 <=  注意：不是比较字符串的长度，而是比较里面第一个元素的大小（类似于字典序）
	n1 := "7"
	n2 := "823456"
	fmt.Println(n1 < n2)
	fmt.Println(n1 <= n2)

	//多行字符串 使用反引号——————所见即所得
	const s = `
	好雨知时节，当春乃发生。
	随风潜入夜，润物细无声。
	野径云俱黑，江船火独明。
	晓看红湿处，花重锦官城。
	`

	fmt.Println(s)

}
